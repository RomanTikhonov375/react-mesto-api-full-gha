{"ast":null,"code":"export const BASE_URL = 'http://127.0.0.1:3000';\nconst checkResponse = res => {\n  if (res.ok) {\n    return res.json();\n  } else {\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n};\n\n//Функция создания запроса\nconst request = (url, options) => {\n  return fetch(`${BASE_URL}` + `${url}`, options).then(checkResponse);\n};\nexport const register = ({\n  password,\n  email\n}) => {\n  return request(`/signup`, {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    method: 'POST',\n    body: JSON.stringify({\n      password: password,\n      email: email\n    })\n  });\n};\nexport const login = ({\n  password,\n  email\n}) => {\n  return request(`/signin`, {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    method: 'POST',\n    body: JSON.stringify({\n      password: password,\n      email: email\n    })\n  });\n};\nexport const checkToken = jwt => {\n  return request(`/users/me`, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${jwt}`\n    },\n    method: 'GET'\n  });\n};","map":{"version":3,"names":["BASE_URL","checkResponse","res","ok","json","Promise","reject","status","request","url","options","fetch","then","register","password","email","headers","method","body","JSON","stringify","login","checkToken","jwt"],"sources":["C:/Users/Roman/dev/react-mesto-api-full-gha/frontend/src/utils/auth.js"],"sourcesContent":["export const BASE_URL = 'http://127.0.0.1:3000'\r\n\r\n\r\nconst checkResponse = (res) => {\r\n    if (res.ok) {\r\n        return res.json();\r\n    } else {\r\n        return Promise.reject(`Ошибка: ${res.status}`);\r\n    }\r\n}\r\n\r\n//Функция создания запроса\r\nconst request = (url, options) => {\r\n    return fetch(`${BASE_URL}` + `${url}`, options).then(checkResponse)\r\n}\r\n\r\nexport const register = ({ password, email }) => {\r\n    return request(`/signup`, {\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n            password: password,\r\n            email: email\r\n        })\r\n    })\r\n}\r\n\r\n\r\nexport const login = ({ password, email }) => {\r\n    return request(`/signin`, {\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n            password: password,\r\n            email: email\r\n        })\r\n    })\r\n}\r\n\r\nexport const checkToken = (jwt) => {\r\n    return request(`/users/me`, {\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Authorization\": `Bearer ${jwt}`\r\n        },\r\n        method: 'GET'\r\n    })\r\n}\r\n\r\n"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,uBAAuB;AAG/C,MAAMC,aAAa,GAAIC,GAAG,IAAK;EAC3B,IAAIA,GAAG,CAACC,EAAE,EAAE;IACR,OAAOD,GAAG,CAACE,IAAI,CAAC,CAAC;EACrB,CAAC,MAAM;IACH,OAAOC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAAC;EAClD;AACJ,CAAC;;AAED;AACA,MAAMC,OAAO,GAAGA,CAACC,GAAG,EAAEC,OAAO,KAAK;EAC9B,OAAOC,KAAK,CAAE,GAAEX,QAAS,EAAC,GAAI,GAAES,GAAI,EAAC,EAAEC,OAAO,CAAC,CAACE,IAAI,CAACX,aAAa,CAAC;AACvE,CAAC;AAED,OAAO,MAAMY,QAAQ,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAM,CAAC,KAAK;EAC7C,OAAOP,OAAO,CAAE,SAAQ,EAAE;IACtBQ,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACjBN,QAAQ,EAAEA,QAAQ;MAClBC,KAAK,EAAEA;IACX,CAAC;EACL,CAAC,CAAC;AACN,CAAC;AAGD,OAAO,MAAMM,KAAK,GAAGA,CAAC;EAAEP,QAAQ;EAAEC;AAAM,CAAC,KAAK;EAC1C,OAAOP,OAAO,CAAE,SAAQ,EAAE;IACtBQ,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACjBN,QAAQ,EAAEA,QAAQ;MAClBC,KAAK,EAAEA;IACX,CAAC;EACL,CAAC,CAAC;AACN,CAAC;AAED,OAAO,MAAMO,UAAU,GAAIC,GAAG,IAAK;EAC/B,OAAOf,OAAO,CAAE,WAAU,EAAE;IACxBQ,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAG,UAASO,GAAI;IACnC,CAAC;IACDN,MAAM,EAAE;EACZ,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}