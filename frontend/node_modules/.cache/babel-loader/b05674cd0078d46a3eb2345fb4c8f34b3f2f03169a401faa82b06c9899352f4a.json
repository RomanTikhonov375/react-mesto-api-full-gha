{"ast":null,"code":"export class Api {\n  constructor({\n    baseUrl,\n    headers\n  }) {\n    this.baseUrl = baseUrl;\n    this.headers = headers;\n  }\n\n  //Метод для обработки ошибке в запросе\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  }\n\n  //Функция создания запроса\n  _request(url, options) {\n    return fetch(`${this.baseUrl}` + `${url}`, options).then(this._checkResponse);\n  }\n\n  //Метод для запроса карточек с сервера\n  getInitialCards() {\n    return this._request(`/cards`, {\n      headers: this.headers\n    });\n  }\n\n  //Метод для запроса текущего пользователя с сервера\n  getUserInfo() {\n    return this._request(`/users/me`, {\n      headers: this.headers\n    });\n  }\n\n  //Метод для обновления данных пользователя на сервере\n  editingProfile({\n    name,\n    about\n  }) {\n    return this._request(`/users/me`, {\n      headers: this.headers,\n      method: 'PATCH',\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    });\n  }\n\n  //Метод для добавления карточки пользователя на сервер\n  setUserCard({\n    name,\n    link\n  }) {\n    return this._request(`/cards`, {\n      headers: this.headers,\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify({\n        name: name,\n        link: link\n      })\n    });\n  }\n\n  //Метод для удаления карточки пользователя с сервера\n  deleteCard(id) {\n    return this._request(`/cards/${id}/`, {\n      headers: this.headers,\n      method: 'DELETE'\n    });\n  }\n\n  //Метод для добавления лайка пользователя на сервер\n  changeLikeCardStatus(id, isLiked) {\n    if (!isLiked) {\n      return this._request(`/cards/${id}/likes`, {\n        headers: this.headers,\n        method: 'PUT'\n      });\n    } else {\n      return this._request(`/cards/${id}/likes`, {\n        headers: this.headers,\n        method: 'DELETE'\n      });\n    }\n  }\n\n  //Метод для изменения аватара пользователя на сервере\n  setAvatar(url) {\n    return this._request(`/users/me/avatar`, {\n      headers: this.headers,\n      method: 'PATCH',\n      body: JSON.stringify({\n        avatar: url\n      })\n    });\n  }\n}\nconst token = localStorage.getItem;\nconst api = new Api({\n  baseUrl: 'http://127.0.0.1:3000',\n  headers: {\n    authorization: 'ef82b72f-312f-4f17-b9cd-ed4bbdfcd441',\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","baseUrl","headers","_checkResponse","res","ok","json","Promise","reject","status","_request","url","options","fetch","then","getInitialCards","getUserInfo","editingProfile","name","about","method","body","JSON","stringify","setUserCard","link","deleteCard","id","changeLikeCardStatus","isLiked","setAvatar","avatar","token","localStorage","getItem","api","authorization"],"sources":["C:/Users/Roman/dev/react-mesto-api-full-gha/frontend/src/utils/Api.js"],"sourcesContent":["\r\n export class Api {\r\n    constructor({ baseUrl, headers }) {\r\n        this.baseUrl = baseUrl;\r\n        this.headers = headers;\r\n    }\r\n\r\n\r\n    //Метод для обработки ошибке в запросе\r\n    _checkResponse(res) {\r\n        if (res.ok) {\r\n            return res.json();\r\n        } else {\r\n            return Promise.reject(`Ошибка: ${res.status}`);\r\n        }\r\n    }\r\n\r\n    //Функция создания запроса\r\n    _request(url, options) {\r\n        return fetch(`${this.baseUrl}` + `${url}`, options).then(this._checkResponse)\r\n\r\n    }\r\n\r\n    //Метод для запроса карточек с сервера\r\n    getInitialCards() {\r\n        return this._request(`/cards`, {\r\n            headers: this.headers\r\n        })\r\n    }\r\n\r\n    //Метод для запроса текущего пользователя с сервера\r\n    getUserInfo() {\r\n        return this._request(`/users/me`, {\r\n            headers: this.headers\r\n        })\r\n    }\r\n\r\n    //Метод для обновления данных пользователя на сервере\r\n    editingProfile({name, about}) {\r\n        return this._request(`/users/me`, {\r\n            headers: this.headers,\r\n            method: 'PATCH',\r\n            body: JSON.stringify({\r\n                name: name,\r\n                about: about\r\n            })\r\n        })\r\n        }\r\n\r\n    //Метод для добавления карточки пользователя на сервер\r\n    setUserCard({name, link}) {\r\n        return this._request(`/cards`, {\r\n            headers: this.headers,\r\n            method: 'POST',\r\n                headers: this.headers,\r\n                body: JSON.stringify({\r\n                    name: name,\r\n                    link: link\r\n                })\r\n        })\r\n        }\r\n\r\n    //Метод для удаления карточки пользователя с сервера\r\n    deleteCard(id) {\r\n        return this._request(`/cards/${id}/`, {\r\n            headers: this.headers,\r\n            method: 'DELETE',\r\n        })\r\n        }\r\n\r\n    //Метод для добавления лайка пользователя на сервер\r\n    changeLikeCardStatus(id , isLiked) {\r\n        if (!isLiked) \r\n            { return this._request(`/cards/${id}/likes`, {\r\n                headers: this.headers,\r\n             method: 'PUT',\r\n         }) } else  {\r\n            return this._request(`/cards/${id}/likes`, {\r\n                headers: this.headers,\r\n                method: 'DELETE',\r\n            })\r\n         }\r\n        }\r\n\r\n\r\n    //Метод для изменения аватара пользователя на сервере\r\n    setAvatar(url) {\r\n        return this._request(`/users/me/avatar`, {\r\n            headers: this.headers,\r\n            method: 'PATCH',\r\n            body: JSON.stringify({\r\n                avatar: url\r\n            })\r\n        })\r\n        }\r\n\r\n}\r\n\r\nconst token = localStorage.getItem\r\n\r\n const api = new Api({\r\n    baseUrl: 'http://127.0.0.1:3000',\r\n    headers: {\r\n        authorization: 'ef82b72f-312f-4f17-b9cd-ed4bbdfcd441',\r\n        'Content-Type': 'application/json'\r\n    }\r\n});\r\n\r\nexport default api;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}