{"ast":null,"code":"export var BASE_URL='https://api.romantikhonov.mesto.nomoredomainsmonster.ru';var checkResponse=function checkResponse(res){if(res.ok){return res.json();}else{return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));}};//Функция создания запроса\nvar request=function request(url,options){return fetch(\"\".concat(BASE_URL)+\"\".concat(url),options).then(checkResponse);};export var register=function register(_ref){var password=_ref.password,email=_ref.email;return request(\"/signup\",{headers:{\"Content-Type\":\"application/json\"},method:'POST',body:JSON.stringify({password:password,email:email})});};export var login=function login(_ref2){var password=_ref2.password,email=_ref2.email;return request(\"/signin\",{headers:{\"Content-Type\":\"application/json\"},method:'POST',body:JSON.stringify({password:password,email:email})});};export var checkToken=function checkToken(jwt){return request(\"/users/me\",{headers:{\"Content-Type\":\"application/json\",\"Authorization\":\"Bearer \".concat(jwt)},method:'GET'});};","map":{"version":3,"names":["BASE_URL","checkResponse","res","ok","json","Promise","reject","concat","status","request","url","options","fetch","then","register","_ref","password","email","headers","method","body","JSON","stringify","login","_ref2","checkToken","jwt"],"sources":["C:/Users/Roman/dev/react-mesto-api-full-gha/frontend/src/utils/auth.js"],"sourcesContent":["export const BASE_URL = 'https://api.romantikhonov.mesto.nomoredomainsmonster.ru'\r\n\r\n\r\nconst checkResponse = (res) => {\r\n    if (res.ok) {\r\n        return res.json();\r\n    } else {\r\n        return Promise.reject(`Ошибка: ${res.status}`);\r\n    }\r\n}\r\n\r\n//Функция создания запроса\r\nconst request = (url, options) => {\r\n    return fetch(`${BASE_URL}` + `${url}`, options).then(checkResponse)\r\n}\r\n\r\nexport const register = ({ password, email }) => {\r\n    return request(`/signup`, {\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n            password: password,\r\n            email: email\r\n        })\r\n    })\r\n}\r\n\r\n\r\nexport const login = ({ password, email }) => {\r\n    return request(`/signin`, {\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n            password: password,\r\n            email: email\r\n        })\r\n    })\r\n}\r\n\r\nexport const checkToken = (jwt) => {\r\n    return request(`/users/me`, {\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Authorization\": `Bearer ${jwt}`\r\n        },\r\n        method: 'GET'\r\n    })\r\n}\r\n\r\n"],"mappings":"AAAA,MAAO,IAAM,CAAAA,QAAQ,CAAG,yDAAyD,CAGjF,GAAM,CAAAC,aAAa,CAAG,QAAhB,CAAAA,aAAaA,CAAIC,GAAG,CAAK,CAC3B,GAAIA,GAAG,CAACC,EAAE,CAAE,CACR,MAAO,CAAAD,GAAG,CAACE,IAAI,CAAC,CAAC,CACrB,CAAC,IAAM,CACH,MAAO,CAAAC,OAAO,CAACC,MAAM,0CAAAC,MAAA,CAAYL,GAAG,CAACM,MAAM,CAAE,CAAC,CAClD,CACJ,CAAC,CAED;AACA,GAAM,CAAAC,OAAO,CAAG,QAAV,CAAAA,OAAOA,CAAIC,GAAG,CAAEC,OAAO,CAAK,CAC9B,MAAO,CAAAC,KAAK,CAAC,GAAAL,MAAA,CAAGP,QAAQ,KAAAO,MAAA,CAAQG,GAAG,CAAE,CAAEC,OAAO,CAAC,CAACE,IAAI,CAACZ,aAAa,CAAC,CACvE,CAAC,CAED,MAAO,IAAM,CAAAa,QAAQ,CAAG,QAAX,CAAAA,QAAQA,CAAAC,IAAA,CAA4B,IAAtB,CAAAC,QAAQ,CAAAD,IAAA,CAARC,QAAQ,CAAEC,KAAK,CAAAF,IAAA,CAALE,KAAK,CACtC,MAAO,CAAAR,OAAO,WAAY,CACtBS,OAAO,CAAE,CACL,cAAc,CAAE,kBACpB,CAAC,CACDC,MAAM,CAAE,MAAM,CACdC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACjBN,QAAQ,CAAEA,QAAQ,CAClBC,KAAK,CAAEA,KACX,CAAC,CACL,CAAC,CAAC,CACN,CAAC,CAGD,MAAO,IAAM,CAAAM,KAAK,CAAG,QAAR,CAAAA,KAAKA,CAAAC,KAAA,CAA4B,IAAtB,CAAAR,QAAQ,CAAAQ,KAAA,CAARR,QAAQ,CAAEC,KAAK,CAAAO,KAAA,CAALP,KAAK,CACnC,MAAO,CAAAR,OAAO,WAAY,CACtBS,OAAO,CAAE,CACL,cAAc,CAAE,kBACpB,CAAC,CACDC,MAAM,CAAE,MAAM,CACdC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACjBN,QAAQ,CAAEA,QAAQ,CAClBC,KAAK,CAAEA,KACX,CAAC,CACL,CAAC,CAAC,CACN,CAAC,CAED,MAAO,IAAM,CAAAQ,UAAU,CAAG,QAAb,CAAAA,UAAUA,CAAIC,GAAG,CAAK,CAC/B,MAAO,CAAAjB,OAAO,aAAc,CACxBS,OAAO,CAAE,CACL,cAAc,CAAE,kBAAkB,CAClC,eAAe,WAAAX,MAAA,CAAYmB,GAAG,CAClC,CAAC,CACDP,MAAM,CAAE,KACZ,CAAC,CAAC,CACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}